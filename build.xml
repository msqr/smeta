<?xml version="1.0"?>
<!--
  Copyright (c) 2007 Matt Magoffin
  
  This program is free software; you can redistribute it and/or 
  modify it under the terms of the GNU General Public License as 
  published by the Free Software Foundation; either version 2 of 
  the License, or (at your option) any later version.
  
  This program is distributed in the hope that it will be useful, 
  but WITHOUT ANY WARRANTY; without even the implied warranty of 
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU 
  General Public License for more details.
  
  You should have received a copy of the GNU General Public License 
  along with this program; if not, write to the Free Software 
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
  02111-1307 USA

  $Id: build.xml,v 1.13 2007/01/30 00:44:34 matt Exp $   
-->
<project name="sMeta" default="help" xmlns:ivy="antlib:org.apache.ivy.ant">

	<property file="build.properties" />

	<property name="dir.base" value="${basedir}"/>
	<property name="dir.source" value="${dir.base}/src"/>
	<property name="dir.source.test" value="${dir.base}/src-test"/>
	<property name="dir.build" value="${dir.base}/build/ant" />
	<property name="dir.compile" value="${dir.build}/classes"/>
	<property name="dir.compile.test" value="${dir.build}/test"/>
	<property name="dir.javadoc" value="${dir.build}/javadoc"/>
	<property name="dir.dist" value="${dir.base}/dist"/>
	<property name="dir.lib" value="${dir.base}/lib"/>
	<property name="dir.webhome" value="defs/docs/webhome"/>

	<property name="app.name" value="smeta" />

	<property name="dir.app.dest" value="${dir.build}/${app.name}"/>
	<property name="compile.debug" value="true" />
	<property name="compile.deprecation" value="false" />
	<property name="compile.optimize" value="true" />
	<property name="compile.nowarn" value="true" />

	<property name="build.version" value="(local build)"/>

	<property name="dir.coverage" value="coverage"/>
	<property name="dir.env" value="environment"/>
	<property name="dir.env.defaults" value="defaults"/>

	<property name="git.tag" value="1.0"/>
	<property name="git.tag.path" value="refs/tags/${git.tag}"/>
	<property name="git.url" value="https://github.com/msqr/smeta.git"/>
	<property name="git.dir.repo" value="${basedir}/build/repo"/>
	<property name="git.dir.build" value="${git.dir.repo}"/>

	<tstamp>
		<format property="build.time" pattern="MM/dd/yyyy hh:mm aa z" />
	</tstamp>
	<property name="version.properties" value="version.properties" />

	<path id="lib.path">
		<fileset dir="${dir.lib}">
			<include name="**/*.jar"/>
			<include name="**/*.zip"/>
		</fileset>
	</path>
		
	<path id="source.path">
		<pathelement location="${dir.source}"/>
	</path>

	<path id="unit-test.path">
		<pathelement location="${dir.compile.test}"/>
		<path refid="lib.path"/>
	</path>
	
	<fileset id="jars.app" dir="${dir.lib}">
		<include name="isoviewer-*.jar"/>
		<include name="metadata-extractor-*.jar"/>
		<include name="log4j*.jar"/>
		<exclude name="*-src.jar"/>
	</fileset>

	<!-- Ivy integration -->

	<target name="ivy-init">
		<taskdef resource="org/apache/ivy/ant/antlib.xml"
			uri="antlib:org.apache.ivy.ant"
			classpath="${dir.lib}/ivy-2.4.0.jar"/>
		<ivy:settings file="${dir.lib}/ivysettings.xml"/>
	</target>
	
	<target name="lib-resolve" depends="ivy-init">
		<echo message="[====&gt; Resolving dependencies (compile) &lt;====]"/>
		<ivy:resolve file="${basedir}/ivy.xml" type="jar,bundle" conf="compile"/>
	</target>
	
	<target name="init">
		<mkdir dir="${dir.build}" />
	</target>

	<target name="prepare">
		<mkdir dir="${dir.compile}"/>
		<copy todir="${dir.compile}" filtering="yes">
			<fileset dir="${dir.env}">
				<include name="META-INF/**"/>
			</fileset>
			<fileset dir="${dir.source}">
				<include name="**"/>
				<exclude name="**/*.java"/>
				<exclude name="**/package.html"/>
			</fileset>
		</copy>
	</target>

	<target name="compile.path" depends="lib-resolve">
		<ivy:cachepath pathid="ivy.lib.path" type="jar,bundle" conf="compile"/>
		<path id="compile.path">
			<!--pathelement location="${dir.compile.dest}"/-->
			<path refid="ivy.lib.path"/>
			<path refid="lib.path"/>
		</path>
	</target>

	<target name="compile" depends="compile.path,prepare" description="Compile source files">
		<mkdir dir="${dir.compile}"/>
		<!--property name="cp" refid="compile.path"/>
		<echo>Path: ${cp}</echo-->
		<javac srcdir="${dir.source}"
			destdir="${dir.compile}"
			debug="${compile.debug}" 
			includeantruntime="false"
			deprecation="${compile.deprecation}" 
			optimize="${compile.optimize}" 
			nowarn="${compile.nowarn}"
			target="1.5"
			source="1.5">
			<classpath refid="compile.path" />
		</javac>
	</target>

	<property name="dir.test.home" value="${dir.build}/test-home"/>
	<property name="dir.compile.test" value="${dir.test.home}/classes"/>

	<target name="prepare-test">
		<mkdir dir="${dir.compile.test}"/>
		
		<!-- Setup default props for test -->
		<copy todir="${dir.compile.test}">
			<fileset dir="${dir.env.defaults}">
				<include name="**"/>
				<exclude name="smeta-test-environment.properties"/>
			</fileset>
		</copy>
	</target>

	<target name="compile-test" depends="prepare-test">
		<ant inheritall="yes" target="compile">
			<property name="dir.compile" value="${dir.compile.test}"/>
		</ant>
		<ant inheritall="yes" target="compile">
			<property name="dir.source" value="${dir.source.test}"/>
			<property name="dir.compile" value="${dir.compile.test}"/>
		</ant>
	</target>
	
	<target name="junit" depends="compile,compile-test" description="Run all JUnit test cases">
		<junit printsummary="on" haltonfailure="no" fork="true">
			<classpath>
				<path refid="ivy.lib.path"/>
				<path refid="unit-test.path"/>
			</classpath>
			<formatter type="brief" usefile="false" />
			<batchtest>
				<fileset dir="${dir.source.test}" includes="**/*Test.java" />
			</batchtest>
		</junit>
	</target>

	<target name="javadoc" depends="init,compile.path"
		description="Generate JavaDoc API">
		<mkdir dir="${dir.javadoc}"/>
		<javadoc packagenames="magoffin.*,org.farng.*"
			classpathref="compile.path"
			sourcepath="${dir.source}"
			defaultexcludes="yes"
			destdir="${dir.javadoc}"
			author="true"
			version="true"
			use="true"
			windowtitle = "sMeta ${build.version}">
			<doctitle>sMeta: simple metadata API for Java</doctitle>
		</javadoc>
		<echo message="JavaDocs built to ${dir.javadoc}"/>
	</target>

	<target name="clean" description="Delete build files">
		<delete dir="${dir.build}"/>
	</target>
	
	<!-- The app-jar target will include some dependencies directly in the smeta JAR, so
	     you can do a "java -jar smeta-app.jar <file>" to easily see the metadata of
	     arbitrary files from the command line. -->
	<target name="app-jar" description="Generate a distribution JAR with dependencies built in"
		depends="compile">
		<mkdir dir="${dir.dist}"/>
		<jar destfile="${dir.dist}/${app.name}-app.jar">
			<manifest>
				<attribute name="Main-Class" value="magoffin.matt.meta.util.Display"/>
			</manifest>
			<fileset dir="${dir.compile}">
				<include name="**"/>
			</fileset>
			
			<!-- include dependencies -->
			<zipgroupfileset refid="jars.app"/>
		</jar>
	</target>

	<target name="dist-jar" description="Generate a distribution JAR"
		depends="compile,compile-test">
		<mkdir dir="${dir.dist}"/>
		<jar destfile="${dir.dist}/${app.name}.jar">
			<fileset dir="${dir.compile}">
				<include name="**"/>
				<exclude name="log4j.properties"/>
			</fileset>
		</jar>
		<jar destfile="${dir.dist}/${app.name}-test.jar">
			<fileset dir="${dir.compile.test}">
				<include name="**/*.class"/>
				<include name="**/*.properties"/>
				<exclude name="log4j.properties"/>
			</fileset>
		</jar>
		<jar destfile="${dir.dist}/${app.name}-src.jar">
			<fileset dir="${dir.source}">
				<include name="**/*.java"/>
			</fileset>
		</jar>
	</target>

	<!-- Git build targets -->

	<macrodef name="git">
	    <attribute name="command" />
	    <attribute name="dir" default="" />
	    <element name="args" optional="true" />
	    <sequential>
	        <echo message="git @{command}" />
	        <exec executable="git" dir="@{dir}">
	            <arg value="@{command}" />
	            <args/>
	        </exec>
	    </sequential>
	</macrodef>

	<!-- 
		Git Integration
		
		The Git Ant tasks are designed to work with Git tags, such that 
		developers tag the repository with a name such as "v1.0" that 
		represents a stable point in time to build from. Remember, to push
		tags to the remote repository you must do a "git push - -tags".
		Note there shouldn't be a space between those dashes... but in 
		an XML comment we can't have two dashes next to each other.
		
		Next, to build the application from the Git tag, the following
		steps must be performed: 
		
		1) Perform a git-clone to create a local repository. This normally
		   only needs to be done one time, as subsequent builds can run
		   git-fetch to update with the latest remote commits.
		   
		   $ ant git-clone
		   
		2) Perform a git-fetch to grab the latest from the remote repo.
		
		   $ ant git-fetch
		   
		3) Perform a git-checkout to switch to the desired tag:
		
		   $ ant -Dgit.tag=v1.0 git-checkout
		   
		4) Perform a git-release to build the application (you must pass both
		   the git tag and environment name):
		   
		   $ ant -Dgit.tag=v1.0 git-release
		   
		Steps 2-4 can be combined into a single command, for example:
		   
		$ ant -Dgit.tag=v1.0 git-fetch git-checkout git-release
	-->
	
	<target name="jgit-init">
		<taskdef resource="org/eclipse/jgit/ant/ant-tasks.properties">
			 <classpath>
				 <pathelement location="${dir.lib}/git/org.eclipse.jgit-3.6.0.201412230720-r.jar"/>
				 <pathelement location="${dir.lib}/git/org.eclipse.jgit.ant-3.6.0.201412230720-r.jar"/>
				 <pathelement location="${dir.lib}/git/jsch-0.1.51.jar"/>
			 </classpath>
		 </taskdef>
	</target>
	
	<target name="git-clone" description="Clone repo from git" depends="jgit-init">
		<delete dir="${git.dir.repo}"/>
		<mkdir dir="${git.dir.repo}"/>
		<git-clone uri="${git.url}" dest="${git.dir.repo}"/>
	</target>
	
	<target name="git-fetch" description="Fetch from remote git repo">
		<git command="fetch" dir="${git.dir.repo}"/>
	</target>
	
	<target name="git-checkout" description="Switch to a tag/branch" depends="jgit-init">
		<git-checkout src="${git.dir.repo}" branch="${git.tag.path}" 
			createbranch="false" force="false"/>
	</target>
	
	<target name="git-prepare">
	</target>

	<target name="git-build" depends="clean,git-prepare" description="Build from git tag versions">
		
		<property name="app.archive.name" value="${app.name}-${git.tag}"/>
		
		<echo />
		<echo message="Building application version ${git.tag}..."/>

		<ant dir="${git.dir.build}" target="dist-jar" inheritall="no">
			<property name="build.version" value="${git.tag}"/>
			<property name="dir.build" value="${dir.build}"/>
			<property name="dir.dist" value="${dir.dist}"/>
			<property name="app.name" value="${app.archive.name}"/>
			<property name="dir.env" value="defaults"/>
		</ant>
		
	</target>
	
	<target name="git-src-release" 
		description="Build source release TAR from git tag versions">

		<property name="app.archive.name" 
			value="${app.name}-${git.tag}"/>
		<property name="release-source-dir-name"
			value="${app.archive.name}-src"/>
		<property name="release-source-dir" 
			value="${dir.build}/${release-source-dir-name}" />
		<property name="release-source-name" 
			value="${dir.dist}/${app.archive.name}-src.tbz2" />

		<echo message="Building source release ${release-source-name}" />

		<mkdir dir="${dir.dist}"/>
		<delete dir="${release-source-dir}" />
		<delete file="${release-source-name}" />

		<echo message="Creating source README" />
		<copy file="${git.dir.build}/defs/docs/release/README.src.txt" 
			tofile="${release-source-dir}/README" filtering="true">
			<filterset>
				<filter token="VERSION" value="${git.tag}" />
				<filter token="BUILD_DATE" value="${build.time}" />
			</filterset>
		</copy>

		<echo message="Creating LICENSE" />
		<copy file="${git.dir.build}/defs/docs/release/LICENSE.txt" 
			tofile="${release-source-dir}/LICENSE" filtering="true">
			<filterset>
				<filter token="VERSION" value="${git.tag}" />
				<filter token="BUILD_DATE" value="${build.time}" />
			</filterset>
		</copy>

		<echo message="Copying source to tar base directory" />
		<copy todir="${release-source-dir}">
			<fileset dir="${git.dir.build}">
				<include name="**" />
				<include name=".*" />
				<exclude name="build/**" />
				<exclude name="dist/**" />
				<exclude name="environment/**" />
			</fileset>
		</copy>

		<tar tarfile="${release-source-name}" compression="bzip2" 
			longfile="gnu">
			<tarfileset dir="${dir.build}" 
				includes="${release-source-dir-name}/**" />
		</tar>
		
	</target>
	
	<!-- create binary release -->
	<target name="git-bin-release" description="Build binary release TAR from git tag versions"
		depends="git-build,git-javadoc,ivy-init">
		
		<property name="release-dir-name"
			value="${app.archive.name}"/>
		<property name="release-dir" 
			value="${dir.build}/${release-dir-name}" />
		<property name="release-name" 
			value="${dir.dist}/${app.archive.name}.tbz2" />

		<echo message="Building binary release ${release-name}" />

		<delete dir="${release-dir}" />
		<delete file="${release-name}" />

		<echo message="Creating README" />
		<copy file="${git.dir.build}/defs/docs/release/README.bin.txt" 
			tofile="${release-dir}/README" filtering="true">
			<filterset>
				<filter token="VERSION" value="${git.tag}" />
				<filter token="BUILD_DATE" value="${build.time}" />
			</filterset>
		</copy>

		<echo message="Creating LICENSE" />
		<copy file="${git.dir.build}/defs/docs/release/LICENSE.txt" 
			tofile="${release-dir}/LICENSE" filtering="true">
			<filterset>
				<filter token="VERSION" value="${git.tag}" />
				<filter token="BUILD_DATE" value="${build.time}" />
			</filterset>
		</copy>

		<echo message="Creating NOTES" />
		<copy filtering="true" todir="${release-dir}">
			<fileset dir="${git.dir.build}/defs/docs/release/notes"
				includes="notes-${git.tag}.txt"/>
			<mapper type="merge" to="NOTES"/>
			<filterset>
				<filter token="VERSION" value="${git.tag}" />
				<filter token="BUILD_DATE" value="${build.time}" />
			</filterset>
		</copy>

		<!-- copy misc README files -->
		<echo message="Copying README files" />
		<copy filtering="true" todir="${release-dir}">
			<fileset dir="${git.dir.build}/defs/docs"
				includes="README-*.txt"/>
			<mapper type="glob" from="*.txt" to="*"/>
			<filterset>
				<filter token="VERSION" value="${git.tag}" />
				<filter token="BUILD_DATE" value="${build.time}" />
			</filterset>
		</copy>
		
		<!-- copy licenses -->
		<echo message="Copying licenses" />
		<mkdir dir="${release-dir}/licenses"/>
		<copy todir="${release-dir}/licenses" flatten="true">
			<fileset dir="${git.dir.build}/defs/docs/licenses" includes="**/*.txt"/>
			<mapper type="glob" from="*.txt" to="*"/>
			<filterset>
				<filter token="VERSION" value="${git.tag}" />
				<filter token="BUILD_DATE" value="${build.time}" />
			</filterset>
		</copy>
		
		<!-- copy 3rd party libraries -->
		<echo message="Copying libraries"/>
		<mkdir dir="${release-dir}/lib"/>
		<ivy:retrieve pattern="${release-dir}/lib/[artifact]-[revision].[ext]" 
			type="jar,bundle" conf="runtime" />
		
		<!-- copy JavaDoc -->
		<echo message="Copying JavaDoc"/>
		<mkdir dir="${release-dir}/docs/api"/>
		<copy todir="${release-dir}/docs/api" flatten="false">
			<fileset dir="${dir.build}/javadoc" includes="**"/>
		</copy>
		
		<!-- copy sMeta jars -->
		<copy todir="${release-dir}">
			<fileset dir="${dir.dist}">
				<include name="${app.archive.name}*.jar"/>
			</fileset>
		</copy>

		<!-- tar it alll up -->
		<tar tarfile="${release-name}" compression="bzip2" longfile="gnu">
			<tarfileset dir="${dir.build}" 
				includes="${release-dir-name}/**">
			</tarfileset>
		</tar>

	</target>
	
	<target name="git-javadoc" depends="git-prepare"
		description="Build the JavaDocs from git tag versions">

		<echo />
		<echo message="Building JavaDocs for version ${git.tag}..."/>

		<ant dir="${git.dir.build}" target="javadoc" inheritall="no">
			<property name="build.version" value="${git.tag}"/>
			<property name="dir.build" value="${dir.build}"/>
			<property name="dir.javadoc" value="${dir.javadoc}"/>
			<property name="dir.dist" value="${dir.dist}"/>
			<property name="app.name" value="${app.archive.name}"/>
		</ant>
	
	</target>

	<target name="git-release" depends="clean,git-bin-release,git-src-release,git-javadoc" 
		description="Create release artifacts from git"/>
	
	<target name="help">
		<echo>TODO</echo>
	</target>

</project>
