<?xml version="1.0"?>
<!--
  Copyright (c) 2007 Matt Magoffin
  
  This program is free software; you can redistribute it and/or 
  modify it under the terms of the GNU General Public License as 
  published by the Free Software Foundation; either version 2 of 
  the License, or (at your option) any later version.
  
  This program is distributed in the hope that it will be useful, 
  but WITHOUT ANY WARRANTY; without even the implied warranty of 
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU 
  General Public License for more details.
  
  You should have received a copy of the GNU General Public License 
  along with this program; if not, write to the Free Software 
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
  02111-1307 USA

  $Id: build.xml,v 1.13 2007/01/30 00:44:34 matt Exp $   
-->
<project name="sMeta" default="help">

	<property file="build.properties" />

	<property name="dir.base" value="${basedir}"/>
	<property name="dir.source" value="${dir.base}/src"/>
	<property name="dir.source.test" value="${dir.base}/src-test"/>
	<property name="dir.build" value="${dir.base}/build/ant" />
	<property name="dir.build.cvs" value="${dir.base}/build/cvs"/>
	<property name="dir.compile" value="${dir.build}/classes"/>
	<property name="dir.compile.test" value="${dir.build}/test"/>
	<property name="dir.javadoc" value="${dir.build}/javadoc"/>
	<property name="dir.dist" value="${dir.base}/dist"/>
	<property name="dir.lib" value="${dir.base}/lib"/>
	<property name="dir.webhome" value="defs/docs/webhome"/>

	<property name="app.name" value="smeta" />

	<property name="dir.app.dest" value="${dir.build}/${app.name}"/>
	<property name="compile.debug" value="true" />
	<property name="compile.deprecation" value="false" />
	<property name="compile.optimize" value="true" />
	<property name="compile.nowarn" value="true" />

	<property name="build.version" value="(local build)"/>

	<property name="dir.coverage" value="coverage"/>
	<property name="dir.env" value="environment"/>
	<property name="dir.env.defaults" value="defaults"/>
	<property name="cvs.root" value="/data/cvs"/>
	<property name="cvs.compressionlevel" value="6" />
	<property name="cvs.module.name" value="smeta"/>

	<path id="path.svn">
		<fileset dir="${dir.lib}/svn" includes="*.jar"/>
	</path>
	
	<taskdef resource="svntask.properties" classpathref="path.svn"/>
	<property name="svn.tag" value="1.0"/>
	<property name="svn.path" value="/tags/${svn.tag}"/>
	<property name="svn.url" 
		value="https://smeta.svn.sourceforge.net/svnroot/smeta/smeta${svn.path}"/>
	<property name="svn.username" value=""/>
	<property name="svn.password" value=""/>
	<property name="svn.revision" value="HEAD"/>
	<property name="svn.dir.build" value="${dir.base}/build/svn"/>
	
	<tstamp>
		<format property="build.time" pattern="MM/dd/yyyy hh:mm aa z" />
	</tstamp>
	<property name="version.properties" value="version.properties" />

	<path id="lib.path">
		<fileset dir="${dir.lib}">
			<include name="**/*.jar"/>
			<include name="**/*.zip"/>
		</fileset>
	</path>
		
	<path id="compile.path">
		<pathelement location="${dir.build}"/>
		<path refid="lib.path"/>
	</path>

	<path id="source.path">
		<pathelement location="${dir.source}"/>
	</path>

	<path id="emma.lib.path" >
		<pathelement location="${dir.lib}/emma.jar" />
		<pathelement location="${dir.lib}/emma_ant.jar" />
	</path>

	<path id="unit-test.path">
		<pathelement location="${dir.compile.test}"/>
		<path refid="lib.path"/>
	</path>

	<taskdef resource = "emma_ant.properties" classpathref="emma.lib.path"/>
	
	<target name="init">
		<mkdir dir="${dir.build}" />
	</target>

	<target name="prepare">
		<mkdir dir="${dir.compile}"/>
		<copy todir="${dir.compile}" filtering="yes">
			<fileset dir="${dir.env}">
				<include name="META-INF/**"/>
			</fileset>
			<fileset dir="${dir.source}">
				<include name="**"/>
				<exclude name="**/*.java"/>
				<exclude name="**/package.html"/>
			</fileset>
		</copy>
	</target>

	<target name="compile" depends="prepare" description="Compile source files">
		<mkdir dir="${dir.compile}"/>
		<!--property name="cp" refid="compile.path"/>
		<echo>Path: ${cp}</echo-->
		<javac srcdir="${dir.source}"
			destdir="${dir.compile}"
			debug="${compile.debug}" 
			deprecation="${compile.deprecation}" 
			optimize="${compile.optimize}" 
			nowarn="${compile.nowarn}"
			target="1.5"
			source="1.5">
			<classpath refid="compile.path" />
		</javac>
	</target>

	<property name="dir.test.home" value="${dir.build}/test-home"/>
	<property name="dir.compile.test" value="${dir.test.home}/classes"/>

	<target name="prepare-test">
		<mkdir dir="${dir.compile.test}"/>
		
		<!-- Setup default props for test -->
		<copy todir="${dir.compile.test}">
			<fileset dir="${dir.env.defaults}">
				<include name="**"/>
				<exclude name="smeta-test-environment.properties"/>
			</fileset>
		</copy>
	</target>

	<target name="compile-test" depends="prepare-test">
		<ant inheritall="yes" target="compile">
			<property name="dir.compile" value="${dir.compile.test}"/>
		</ant>
		<ant inheritall="yes" target="compile">
			<property name="dir.source" value="${dir.source.test}"/>
			<property name="dir.compile" value="${dir.compile.test}"/>
		</ant>
	</target>
	
	<target name="emma" description="turns on EMMA's on-the-fly instrumentation mode" >
		<property name="emma.enabled" value="true" />
	</target>

	<target name="junit" depends="compile-test" description="Run all JUnit test cases">
		<emmajava enabled="${emma.enabled}" 
			libclasspathref="lib.path" 
			fullmetadata="yes" 
			filter="${emma.filter}" 
			sourcepath="${src.dir}" 
			classname="magoffin.matt.meta.AllTests" 
			classpathref="unit-test.path"
			sourcepathref="source.path"
			failonerror="true">
			<filter includes="magoffin.matt.meta.*" 
				excludes="*Test,*Tests,*.Mock*,*Exception,*Example"/>
			<txt outfile="${dir.coverage}/coverage.txt" />
			<xml outfile="${dir.coverage}/coverage.xml" />
			<html outfile="${dir.coverage}/coverage.html" />
		</emmajava>
	</target>

	<target name="javadoc" depends="init"
		description="Generate JavaDoc API">
		<mkdir dir="${dir.javadoc}"/>
		<javadoc packagenames="magoffin.*,org.farng.*"
			classpathref="compile.path"
			sourcepath="${dir.source}"
			defaultexcludes="yes"
			destdir="${dir.javadoc}"
			author="true"
			version="true"
			use="true"
			windowtitle = "sMeta ${build.version}">
			<doctitle>sMeta: simple metadata API for Java</doctitle>
		</javadoc>
		<echo message="JavaDocs built to ${dir.javadoc}"/>
	</target>

	<target name="clean" description="Delete build files">
		<delete dir="${dir.build}"/>
	</target>

	<target name="dist-jar" description="Generate a distribution JAR"
		depends="compile,compile-test">
		<mkdir dir="${dir.dist}"/>
		<jar destfile="${dir.dist}/${app.name}.jar">
			<fileset dir="${dir.compile}">
				<include name="**"/>
				<exclude name="log4j.properties"/>
			</fileset>
		</jar>
		<jar destfile="${dir.dist}/${app.name}-test.jar">
			<fileset dir="${dir.compile.test}">
				<include name="**/*.class"/>
				<include name="**/*.properties"/>
				<exclude name="log4j.properties"/>
			</fileset>
		</jar>
		<jar destfile="${dir.dist}/${app.name}-src.jar">
			<fileset dir="${dir.source}">
				<include name="**/*.java"/>
			</fileset>
		</jar>
	</target>

	<!-- 
		CVS-based build targets below 
		
		CVS builds are based on tagged CVS versions, using versions
		tagged as <name>-<major>-<minor>-<build>. The easiest way 
		to pass these to the build is to use command-line property 
		arguments (-D<prop>=<value>). For example, for version 1.2, 
		build number 35, you could call ant like:
		
		ant -Dcvs.version.major=1 -Dcvs.version.minor=2 -Dcvs.version.build=35
		
		The CVS tags must be 
		version 1.2 of sMeta, build 35, would be tagged 'smeta-1-2-35'.
		The build version is stored in 'version.properties' file, so 
		subsequent builds can omit the -D properties if desired.
	-->
	
	<target name="clean-cvs" description="Delete CVS based build files">
		<delete dir="${dir.build.cvs}"/>
	</target>

	<!-- Copy environment properties (to catch local env) -->
	<target name="cvs-prepare">
		<!--mkdir dir="${dir.build.cvs}/${cvs.module.name}/${dir.env}"/>
		<copy todir="${dir.build.cvs}/${cvs.module.name}/${dir.env}">
			<fileset dir="${dir.base}/${dir.env}" includes="**" excludes="README*"/>
		</copy-->
	</target>
	
	<!-- ======================================================= -->
	<!-- Set the build version                                   -->
	<!-- ======================================================= -->
	
	<target name="set_ver_major" if="cvs.version.major">
		<echo message="Setting to major version: ${cvs.version.major}" />
		<propertyfile file="${version.properties}">
			<entry key="app.version.major" type="string" operation="=" 
				value="${cvs.version.major}" />
		</propertyfile>
	</target>
	<target name="set_ver_minor" if="cvs.version.minor">
		<echo message="Setting to minor version: ${cvs.version.minor}" />
		<propertyfile file="${version.properties}">
			<entry key="app.version.minor" type="string" operation="=" 
				value="${cvs.version.minor}" />
		</propertyfile>
	</target>
	<target name="set_ver_build" if="cvs.version.build">
		<echo message="Setting to build version: ${cvs.version.build}" />
		<propertyfile file="${version.properties}">
			<entry key="app.version.build" type="string" operation="=" 
				value="${cvs.version.build}" />
		</propertyfile>
	</target>
	
	<target name="set-version" depends="set_ver_major,set_ver_minor,set_ver_build">
		<property file="${version.properties}" />
		<property name="cvs.build.version" 
			value="${app.version.major}.${app.version.minor}.${app.version.build}" />
		<property name="cvs.tag" 
			value="${app.name}-${app.version.major}-${app.version.minor}-${app.version.build}" />
		<property name="app.archive.name" value="${app.name}-${cvs.build.version}"/>
	</target>

	<!-- ======================================================= -->
	<!-- Build from CVS tag versions                             -->
	<!-- ======================================================= -->

	<target name="cvs-update" description="Update checked out CVS files"
		depends="set-version">

		<echo message="----------------------------------" />
		<echo message="CVS root:    ${cvs.root}" />
		<echo message="CVS module:  ${cvs.module.name}" />
		<echo message="Update dir:  ${dir.build.cvs}/${cvs.module.name}" />
		<echo message="----------------------------------" />

		<echo />
		<echo message="Updating ${cvs.module.name}" />
		<cvs cvsRoot="${cvs.root}" command="update" cvsRsh="ssh" 
			dest="${dir.build.cvs}/${cvs.module.name}" 
			quiet="true" 
			compressionlevel="${cvs.compressionlevel}"/>
	</target>
	
	<target name="cvs-checkout" description="Checkout CVS sources" 
		depends="clean-cvs,set-version">

		<echo message="----------------------------------" />
		<echo message="CVS root:    ${cvs.root}" />
		<echo message="CVS module:  ${cvs.module.name}" />
		<echo message="CVS tag:     ${cvs.tag}" />
		<echo message="Checkout to: ${dir.build.cvs}" />
		<echo message="----------------------------------" />

		<echo />
		<echo message="Checking out ${cvs.module.name}" />
		<cvs cvsRoot="${cvs.root}" command="checkout" cvsRsh="ssh" 
			package="${cvs.module.name}" dest="${dir.build.cvs}" 
			tag="${cvs.tag}" quiet="true" 
			compressionlevel="${cvs.compressionlevel}"/>
	</target>
	
	<!-- CVS build: call either cvs-checkout or cvs-update before calling this -->
	<target name="cvs-build" depends="clean,cvs-prepare,set-version" 
		description="Build from CVS tag versions">

		<echo />
		<echo message="Building application version ${cvs.build.version}..."/>

		<ant dir="${dir.build.cvs}/${cvs.module.name}" target="dist-jar" inheritall="no">
			<property name="build.version" value="${cvs.build.version}"/>
			<property name="dir.build" value="${dir.build}"/>
			<property name="dir.env" value="${dir.env.defaults}"/>
			<property name="dir.dist" value="${dir.dist}"/>
			<property name="app.name" value="${app.archive.name}"/>
		</ant>
	
	</target>
	
	<target name="cvs-javadoc" depends="cvs-prepare,set-version"
		description="Build the JavaDocs from CVS tag versions">

		<echo />
		<echo message="Building JavaDocs for version ${cvs.build.version}..."/>

		<ant dir="${dir.build.cvs}/${cvs.module.name}" target="javadoc" inheritall="no">
			<property name="build.version" value="${cvs.build.version}"/>
			<property name="dir.build" value="${dir.build}"/>
			<property name="dir.javadoc" value="${dir.javadoc}"/>
			<property name="dir.env" value="${dir.env.defaults}"/>
			<property name="dir.dist" value="${dir.dist}"/>
			<property name="app.name" value="${app.archive.name}"/>
		</ant>
	
		<echo message="JavaDocs built to ${dir.javadoc}"/>
	</target>
	
	<target name="javadoc-web" description="Copy JavaDocs to webhome">
		<mkdir dir="${dir.webhome}/api"/>
		<copy todir="${dir.webhome}/api">
			<fileset dir="${dir.build}/javadoc" includes="**"/>
		</copy>
	</target>
	
	<!-- ======================================================= -->
	<!-- Build  release TARs from CVS tag versions               -->
	<!-- ======================================================= -->
	<target name="cvs-src-release" depends="cvs-checkout" 
		description="Build source release TAR from CVS tag versions">

		<property name="release-source-dir-name"
			value="${app.archive.name}-src"/>
		<property name="release-source-dir" 
			value="${dir.build}/${release-source-dir-name}" />
		<property name="release-source-name" 
			value="${dir.dist}/${app.archive.name}-src.tbz2" />

		<echo message="Building source release ${release-source-name}" />

		<mkdir dir="${dir.dist}"/>
		<delete dir="${release-source-dir}" />
		<delete file="${release-source-name}" />

		<echo message="Creating source README" />
		<copy file="${dir.build.cvs}/${cvs.module.name}/defs/docs/release/README.src.txt" 
			tofile="${release-source-dir}/README" filtering="true">
			<filterset>
				<filter token="VERSION" value="${cvs.build.version}" />
				<filter token="BUILD_DATE" value="${build.time}" />
			</filterset>
		</copy>

		<echo message="Creating LICENSE" />
		<copy file="${dir.build.cvs}/${cvs.module.name}/defs/docs/release/LICENSE.txt" 
			tofile="${release-source-dir}/LICENSE" filtering="true">
			<filterset>
				<filter token="VERSION" value="${cvs.build.version}" />
				<filter token="BUILD_DATE" value="${build.time}" />
			</filterset>
		</copy>

		<echo message="Copying source to tar base directory" />
		<copy todir="${release-source-dir}">
			<fileset dir="${dir.build.cvs}">
				<include name="${cvs.module.name}/**" />
				<exclude name="**/build/**" />
				<exclude name="**/dist/**" />
				<exclude name="**/environment/**" />
			</fileset>
		</copy>

		<tar tarfile="${release-source-name}" compression="bzip2" 
			longfile="gnu">
			<tarfileset dir="${dir.build}" 
				includes="${release-source-dir-name}/**" />
		</tar>
	</target>
	
	<!-- create binary release -->
	<target name="cvs-bin-release" description="Build binary release TAR from CVS tag versions"
		depends="cvs-build,cvs-javadoc">
		<property name="release-dir-name"
			value="${app.archive.name}"/>
		<property name="release-dir" 
			value="${dir.build}/${release-dir-name}" />
		<property name="release-name" 
			value="${dir.dist}/${app.archive.name}.tbz2" />

		<echo message="Building binary release ${release-name}" />

		<delete dir="${release-dir}" />
		<delete file="${release-name}" />

		<echo message="Creating README" />
		<copy file="${dir.build.cvs}/${cvs.module.name}/defs/docs/release/README.bin.txt" 
			tofile="${release-dir}/README" filtering="true">
			<filterset>
				<filter token="VERSION" value="${cvs.build.version}" />
				<filter token="BUILD_DATE" value="${build.time}" />
			</filterset>
		</copy>

		<echo message="Creating NOTES" />
		<copy filtering="true" todir="${release-dir}">
			<fileset dir="${dir.build.cvs}/${cvs.module.name}/defs/docs/release/notes"
				includes="notes-${cvs.build.version}.txt"/>
			<mapper type="merge" to="NOTES"/>
			<filterset>
				<filter token="VERSION" value="${cvs.build.version}" />
				<filter token="BUILD_DATE" value="${build.time}" />
			</filterset>
		</copy>

		<echo message="Creating LICENSE" />
		<copy file="${dir.build.cvs}/${cvs.module.name}/defs/docs/release/LICENSE.txt" 
			tofile="${release-dir}/LICENSE" filtering="true">
			<filterset>
				<filter token="VERSION" value="${cvs.build.version}" />
				<filter token="BUILD_DATE" value="${build.time}" />
			</filterset>
		</copy>

		<!-- copy misc README files -->
		<echo message="Copying README files" />
		<copy filtering="true" todir="${release-dir}" failonerror="no">
			<fileset dir="${dir.build.cvs}/${cvs.module.name}/defs/docs"
				includes="README-*.txt"/>
			<mapper type="glob" from="*.txt" to="*"/>
			<filterset>
				<filter token="VERSION" value="${cvs.build.version}" />
				<filter token="BUILD_DATE" value="${build.time}" />
			</filterset>
		</copy>
		
		<!-- copy licenses -->
		<echo message="Copying licenses" />
		<mkdir dir="${release-dir}/licenses"/>
		<copy todir="${release-dir}/licenses" flatten="true">
			<fileset dir="${dir.build.cvs}/${cvs.module.name}/defs/docs/licenses" 
				includes="**/*.txt"/>
			<mapper type="glob" from="*.txt" to="*"/>
			<filterset>
				<filter token="VERSION" value="${cvs.build.version}" />
				<filter token="BUILD_DATE" value="${build.time}" />
			</filterset>
		</copy>
		
		<!-- copy 3rd party libraries -->
		<echo message="Copying libraries"/>
		<mkdir dir="${release-dir}/lib"/>
		<copy todir="${release-dir}/lib" flatten="true">
			<fileset dir="${dir.build.cvs}/${cvs.module.name}/lib" 
				includes="log4j*.jar,metadata-extractor*.jar" excludes="**/*-src.jar"/>
		</copy>
		
		<!-- copy JavaDoc -->
		<echo message="Copying JavaDoc"/>
		<mkdir dir="${release-dir}/docs/api"/>
		<copy todir="${release-dir}/docs/api" flatten="false">
			<fileset dir="${dir.build}/javadoc" includes="**"/>
		</copy>
		
		<!-- copy sMeta jars -->
		<copy todir="${release-dir}">
			<fileset dir="${dir.dist}">
				<include name="${app.archive.name}*.jar"/>
			</fileset>
		</copy>

		<!-- tar it alll up -->
		<tar tarfile="${release-name}" compression="bzip2" longfile="gnu">
			<tarfileset dir="${dir.build}" 
				includes="${release-dir-name}/**">
			</tarfileset>
		</tar>

	</target>
	
	
	<!-- Subversion build targets -->

	<target name="svn-checkout" description="Checkout sources from SVN">
		<delete dir="${svn.dir.build}"/>
		<mkdir dir="${svn.dir.build}"/>
		<svn username="${svn.username}" password="${svn.password}">
			<checkout url="${svn.url}" destPath="${svn.dir.build}"
				revision="${svn.revision}"/>
		</svn>
	</target>
	
	<target name="svn-update" description="Update sources previously checked out from SVN">
		<svn username="${svn.username}" password="${svn.password}">
			<update dir="${svn.dir.build}" revision="${svn.revision}"/>
		</svn>
	</target>
	
	<target name="svn-switch" 
		description="Switch sources previously checked out from SVN to another branch">
		<svn username="${svn.username}" password="${svn.password}">
			<switch path="${svn.dir.build}" url="${svn.url}" revision="${svn.revision}"/>
		</svn>
	</target>
	
	<!-- Copy environment properties (to catch local env) -->
	<target name="svn-prepare">
		<!--mkdir dir="${svn.dir.build}/${dir.env}"/>
		<copy todir="${svn.dir.build}/${dir.env}">
			<fileset dir="${dir.base}/${dir.env}" includes="**" excludes="README*"/>
		</copy-->
	</target>

	<target name="svn-build" depends="clean,svn-prepare" description="Build from SVN tag versions">
		
		<property name="app.archive.name" value="${app.name}-${svn.tag}"/>
		
		<echo />
		<echo message="Building application version ${svn.tag} (${svn.revision})..."/>

		<ant dir="${svn.dir.build}" target="dist-jar" inheritall="no">
			<property name="build.version" value="${svn.tag}"/>
			<property name="dir.build" value="${dir.build}"/>
			<property name="dir.env" value="${dir.env.defaults}"/>
			<property name="dir.dist" value="${dir.dist}"/>
			<property name="app.name" value="${app.archive.name}"/>
		</ant>
		
	</target>
	
	<target name="svn-src-release" 
		description="Build source release TAR from SVN tag versions">

		<property name="app.archive.name" 
			value="${app.name}-${svn.tag}"/>
		<property name="release-source-dir-name"
			value="${app.archive.name}-src"/>
		<property name="release-source-dir" 
			value="${dir.build}/${release-source-dir-name}" />
		<property name="release-source-name" 
			value="${dir.dist}/${app.archive.name}-src.tbz2" />

		<echo message="Building source release ${release-source-name}" />

		<mkdir dir="${dir.dist}"/>
		<delete dir="${release-source-dir}" />
		<delete file="${release-source-name}" />

		<echo message="Creating source README" />
		<copy file="${svn.dir.build}/defs/docs/release/README.src.txt" 
			tofile="${release-source-dir}/README" filtering="true">
			<filterset>
				<filter token="VERSION" value="${svn.tag}" />
				<filter token="BUILD_DATE" value="${build.time}" />
			</filterset>
		</copy>

		<echo message="Creating LICENSE" />
		<copy file="${svn.dir.build}/defs/docs/release/LICENSE.txt" 
			tofile="${release-source-dir}/LICENSE" filtering="true">
			<filterset>
				<filter token="VERSION" value="${svn.tag}" />
				<filter token="BUILD_DATE" value="${build.time}" />
			</filterset>
		</copy>

		<echo message="Copying source to tar base directory" />
		<copy todir="${release-source-dir}">
			<fileset dir="${svn.dir.build}">
				<include name="**" />
				<include name=".*" />
				<exclude name="build/**" />
				<exclude name="dist/**" />
				<exclude name="environment/**" />
			</fileset>
		</copy>

		<tar tarfile="${release-source-name}" compression="bzip2" 
			longfile="gnu">
			<tarfileset dir="${dir.build}" 
				includes="${release-source-dir-name}/**" />
		</tar>
		
	</target>
	
	<!-- create binary release -->
	<target name="svn-bin-release" description="Build binary release TAR from SVN tag versions"
		depends="svn-build,svn-javadoc">
		
		<property name="release-dir-name"
			value="${app.archive.name}"/>
		<property name="release-dir" 
			value="${dir.build}/${release-dir-name}" />
		<property name="release-name" 
			value="${dir.dist}/${app.archive.name}.tbz2" />

		<echo message="Building binary release ${release-name}" />

		<delete dir="${release-dir}" />
		<delete file="${release-name}" />

		<echo message="Creating README" />
		<copy file="${svn.dir.build}/defs/docs/release/README.bin.txt" 
			tofile="${release-dir}/README" filtering="true">
			<filterset>
				<filter token="VERSION" value="${svn.tag}" />
				<filter token="BUILD_DATE" value="${build.time}" />
			</filterset>
		</copy>

		<echo message="Creating LICENSE" />
		<copy file="${svn.dir.build}/defs/docs/release/LICENSE.txt" 
			tofile="${release-dir}/LICENSE" filtering="true">
			<filterset>
				<filter token="VERSION" value="${svn.tag}" />
				<filter token="BUILD_DATE" value="${build.time}" />
			</filterset>
		</copy>

		<echo message="Creating NOTES" />
		<copy filtering="true" todir="${release-dir}">
			<fileset dir="${svn.dir.build}/defs/docs/release/notes"
				includes="notes-${svn.tag}.txt"/>
			<mapper type="merge" to="NOTES"/>
			<filterset>
				<filter token="VERSION" value="${svn.tag}" />
				<filter token="BUILD_DATE" value="${build.time}" />
			</filterset>
		</copy>

		<!-- copy misc README files -->
		<echo message="Copying README files" />
		<copy filtering="true" todir="${release-dir}">
			<fileset dir="${svn.dir.build}/defs/docs"
				includes="README-*.txt"/>
			<mapper type="glob" from="*.txt" to="*"/>
			<filterset>
				<filter token="VERSION" value="${svn.tag}" />
				<filter token="BUILD_DATE" value="${build.time}" />
			</filterset>
		</copy>
		
		<!-- copy licenses -->
		<echo message="Copying licenses" />
		<mkdir dir="${release-dir}/licenses"/>
		<copy todir="${release-dir}/licenses" flatten="true">
			<fileset dir="${svn.dir.build}/defs/docs/licenses" includes="**/*.txt"/>
			<mapper type="glob" from="*.txt" to="*"/>
			<filterset>
				<filter token="VERSION" value="${svn.tag}" />
				<filter token="BUILD_DATE" value="${build.time}" />
			</filterset>
		</copy>
		
		<!-- copy 3rd party libraries -->
		<echo message="Copying libraries"/>
		<mkdir dir="${release-dir}/lib"/>
		<copy todir="${release-dir}/lib" flatten="true">
			<fileset dir="${svn.dir.build}/lib" 
				includes="log4j*.jar,metadata-extractor*.jar" excludes="**/*-src.jar"/>
		</copy>
		
		<!-- copy JavaDoc -->
		<echo message="Copying JavaDoc"/>
		<mkdir dir="${release-dir}/docs/api"/>
		<copy todir="${release-dir}/docs/api" flatten="false">
			<fileset dir="${dir.build}/javadoc" includes="**"/>
		</copy>
		
		<!-- copy sMeta jars -->
		<copy todir="${release-dir}">
			<fileset dir="${dir.dist}">
				<include name="${app.archive.name}*.jar"/>
			</fileset>
		</copy>

		<!-- tar it alll up -->
		<tar tarfile="${release-name}" compression="bzip2" longfile="gnu">
			<tarfileset dir="${dir.build}" 
				includes="${release-dir-name}/**">
			</tarfileset>
		</tar>

	</target>
	
	<target name="svn-javadoc" depends="svn-prepare"
		description="Build the JavaDocs from SVN tag versions">

		<echo />
		<echo message="Building JavaDocs for version ${svn.tag}..."/>

		<ant dir="${svn.dir.build}" target="javadoc" inheritall="no">
			<property name="build.version" value="${svn.tag}"/>
			<property name="dir.build" value="${dir.build}"/>
			<property name="dir.javadoc" value="${dir.javadoc}"/>
			<property name="dir.env" value="${dir.env.defaults}"/>
			<property name="dir.dist" value="${dir.dist}"/>
			<property name="app.name" value="${app.archive.name}"/>
		</ant>
	
	</target>
	
	<target name="help">
		<echo>TODO</echo>
	</target>

</project>
